buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
//        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
//        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//apply plugin: 'org.spongepowered.mixin'

// get config values from gradle.properties.
ext.configFile = file('gradle.properties')
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mc_version}-${config.mod_version}"
group = "com.hungteen.${config.mod_id}"
archivesBaseName = "${config.mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: '1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            //avoid pachouli mod crash
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                pvz {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                pvz {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'pvz', '--all',
            '--output', file('src/generated/resources/'),
            '--existing', file('src/main/resources/'),
            '--existing', file('src/generated/resources/')

            mods {
                pvz {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        url "https://maven.blamejared.com"
    }
    maven {// location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
    maven {// location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {// Jade
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'

//    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //https://maven.blamejared.com/vazkii/patchouli/Patchouli/
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    
//    https://dvs1.progwml6.com/files/maven/mezz/jei
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    
    //https://www.curseforge.com/minecraft/mc-mods/jade/files
//    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")
    
    //https://www.curseforge.com/minecraft/mc-mods/configured/files
    implementation fg.deobf("curse.maven:configured-457570:${configured_version}")
}

//mixin {
//    add sourceSets.main, "pvz.refmap.json"
//
//    config "pvz.mixins.json"
//}

task apiJar(type: Jar) {
    classifier = 'api'

    include 'com/hungteen/pvz/api/**'

    // Sources included because of MinecraftForge/ForgeGradle#369
    from sourceSets.main.allSource
    from sourceSets.main.output
}

artifacts {
    archives apiJar
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title": "${config.mod_id}",
            "Specification-Vendor": "${config.mod_owner}",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${config.mod_id}",
            "Implementation-Version": "${config.mod_version}",
            "Implementation-Vendor" :"${config.mod_owner}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
